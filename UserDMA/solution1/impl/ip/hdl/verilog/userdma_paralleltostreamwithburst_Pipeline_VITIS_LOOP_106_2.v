// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module userdma_paralleltostreamwithburst_Pipeline_VITIS_LOOP_106_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        outbuf_din,
        outbuf_full_n,
        outbuf_write,
        sext_ln106,
        trunc_ln,
        sub,
        in_m2s_len,
        sub_i_i,
        count_1,
        m2s_len_i,
        m2s_len_o,
        m2s_len_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
output  [39:0] outbuf_din;
input   outbuf_full_n;
output   outbuf_write;
input  [61:0] sext_ln106;
input  [30:0] trunc_ln;
input  [30:0] sub;
input  [31:0] in_m2s_len;
input  [32:0] sub_i_i;
input  [30:0] count_1;
input  [31:0] m2s_len_i;
output  [31:0] m2s_len_o;
output   m2s_len_o_ap_vld;

reg ap_idle;
reg m_axi_gmem1_ARVALID;
reg m_axi_gmem1_RREADY;
reg outbuf_write;
reg[31:0] m2s_len_o;
reg m2s_len_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln106_reg_338;
reg   [0:0] first_itr_reg_154;
reg    ap_predicate_op58_readreq_state2;
reg    ap_block_state2_io;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
reg   [0:0] icmp_ln106_reg_338_pp0_iter16_reg;
reg    ap_block_state18_pp0_stage0_iter17;
reg   [0:0] icmp_ln106_reg_338_pp0_iter17_reg;
reg    ap_block_state19_pp0_stage0_iter18;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln106_fu_182_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] Img_width_count;
reg    gmem1_blk_n_R;
wire    ap_block_pp0_stage0;
reg    gmem1_blk_n_AR;
reg    outbuf_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] count_1_cast_fu_166_p1;
reg   [31:0] count_1_cast_reg_328;
wire  signed [63:0] sext_ln106_cast_fu_170_p1;
reg  signed [63:0] sext_ln106_cast_reg_333;
reg   [0:0] icmp_ln106_reg_338_pp0_iter1_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter2_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter3_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter4_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter5_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter6_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter7_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter8_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter9_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter10_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter11_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter12_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter13_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter14_reg;
reg   [0:0] icmp_ln106_reg_338_pp0_iter15_reg;
wire   [0:0] out_val_last_V_fu_210_p2;
reg   [0:0] out_val_last_V_reg_342;
reg   [0:0] out_val_last_V_reg_342_pp0_iter1_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter2_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter3_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter4_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter5_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter6_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter7_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter8_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter9_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter10_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter11_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter12_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter13_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter14_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter15_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter16_reg;
reg   [0:0] out_val_last_V_reg_342_pp0_iter17_reg;
wire   [0:0] icmp_ln115_fu_216_p2;
reg   [0:0] icmp_ln115_reg_347;
reg   [0:0] icmp_ln115_reg_347_pp0_iter1_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter2_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter3_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter4_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter5_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter6_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter7_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter8_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter9_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter10_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter11_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter12_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter13_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter14_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter15_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter16_reg;
reg   [0:0] icmp_ln115_reg_347_pp0_iter17_reg;
wire   [0:0] icmp_ln1064_fu_230_p2;
reg   [0:0] icmp_ln1064_reg_353;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter1_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter2_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter3_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter4_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter5_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter6_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter7_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter8_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter9_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter10_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter11_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter12_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter13_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter14_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter15_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter16_reg;
reg   [0:0] icmp_ln1064_reg_353_pp0_iter17_reg;
reg   [31:0] out_val_data_filed_V_reg_364;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_init;
wire   [31:0] add_ln126_fu_256_p2;
wire   [31:0] select_ln1064_fu_242_p3;
reg   [30:0] i_fu_96;
wire   [30:0] add_ln106_fu_188_p2;
reg   [30:0] ap_sig_allocacmp_i_2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln110_fu_198_p2;
wire   [0:0] icmp_ln110_1_fu_204_p2;
wire  signed [31:0] sext_ln1064_fu_226_p0;
wire  signed [32:0] sext_ln1064_fu_226_p1;
wire  signed [31:0] add_ln122_fu_236_p0;
wire   [31:0] add_ln122_fu_236_p2;
wire   [2:0] select_ln118_fu_279_p3;
wire   [3:0] tmp_fu_293_p3;
wire   [6:0] p_Result_s_fu_301_p1;
wire   [6:0] select_ln118_1_fu_286_p3;
wire   [6:0] select_ln1064_1_fu_305_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_553;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 Img_width_count = 32'd0;
#0 ap_done_reg = 1'b0;
end

userdma_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            first_itr_reg_154 <= 1'd1;
        end else if ((1'b1 == ap_condition_553)) begin
            first_itr_reg_154 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln106_fu_182_p2 == 1'd0))) begin
            i_fu_96 <= add_ln106_fu_188_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_96 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln106_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Img_width_count <= select_ln1064_fu_242_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln1064_reg_353_pp0_iter10_reg <= icmp_ln1064_reg_353_pp0_iter9_reg;
        icmp_ln1064_reg_353_pp0_iter11_reg <= icmp_ln1064_reg_353_pp0_iter10_reg;
        icmp_ln1064_reg_353_pp0_iter12_reg <= icmp_ln1064_reg_353_pp0_iter11_reg;
        icmp_ln1064_reg_353_pp0_iter13_reg <= icmp_ln1064_reg_353_pp0_iter12_reg;
        icmp_ln1064_reg_353_pp0_iter14_reg <= icmp_ln1064_reg_353_pp0_iter13_reg;
        icmp_ln1064_reg_353_pp0_iter15_reg <= icmp_ln1064_reg_353_pp0_iter14_reg;
        icmp_ln1064_reg_353_pp0_iter16_reg <= icmp_ln1064_reg_353_pp0_iter15_reg;
        icmp_ln1064_reg_353_pp0_iter17_reg <= icmp_ln1064_reg_353_pp0_iter16_reg;
        icmp_ln1064_reg_353_pp0_iter2_reg <= icmp_ln1064_reg_353_pp0_iter1_reg;
        icmp_ln1064_reg_353_pp0_iter3_reg <= icmp_ln1064_reg_353_pp0_iter2_reg;
        icmp_ln1064_reg_353_pp0_iter4_reg <= icmp_ln1064_reg_353_pp0_iter3_reg;
        icmp_ln1064_reg_353_pp0_iter5_reg <= icmp_ln1064_reg_353_pp0_iter4_reg;
        icmp_ln1064_reg_353_pp0_iter6_reg <= icmp_ln1064_reg_353_pp0_iter5_reg;
        icmp_ln1064_reg_353_pp0_iter7_reg <= icmp_ln1064_reg_353_pp0_iter6_reg;
        icmp_ln1064_reg_353_pp0_iter8_reg <= icmp_ln1064_reg_353_pp0_iter7_reg;
        icmp_ln1064_reg_353_pp0_iter9_reg <= icmp_ln1064_reg_353_pp0_iter8_reg;
        icmp_ln106_reg_338_pp0_iter10_reg <= icmp_ln106_reg_338_pp0_iter9_reg;
        icmp_ln106_reg_338_pp0_iter11_reg <= icmp_ln106_reg_338_pp0_iter10_reg;
        icmp_ln106_reg_338_pp0_iter12_reg <= icmp_ln106_reg_338_pp0_iter11_reg;
        icmp_ln106_reg_338_pp0_iter13_reg <= icmp_ln106_reg_338_pp0_iter12_reg;
        icmp_ln106_reg_338_pp0_iter14_reg <= icmp_ln106_reg_338_pp0_iter13_reg;
        icmp_ln106_reg_338_pp0_iter15_reg <= icmp_ln106_reg_338_pp0_iter14_reg;
        icmp_ln106_reg_338_pp0_iter16_reg <= icmp_ln106_reg_338_pp0_iter15_reg;
        icmp_ln106_reg_338_pp0_iter17_reg <= icmp_ln106_reg_338_pp0_iter16_reg;
        icmp_ln106_reg_338_pp0_iter2_reg <= icmp_ln106_reg_338_pp0_iter1_reg;
        icmp_ln106_reg_338_pp0_iter3_reg <= icmp_ln106_reg_338_pp0_iter2_reg;
        icmp_ln106_reg_338_pp0_iter4_reg <= icmp_ln106_reg_338_pp0_iter3_reg;
        icmp_ln106_reg_338_pp0_iter5_reg <= icmp_ln106_reg_338_pp0_iter4_reg;
        icmp_ln106_reg_338_pp0_iter6_reg <= icmp_ln106_reg_338_pp0_iter5_reg;
        icmp_ln106_reg_338_pp0_iter7_reg <= icmp_ln106_reg_338_pp0_iter6_reg;
        icmp_ln106_reg_338_pp0_iter8_reg <= icmp_ln106_reg_338_pp0_iter7_reg;
        icmp_ln106_reg_338_pp0_iter9_reg <= icmp_ln106_reg_338_pp0_iter8_reg;
        icmp_ln115_reg_347_pp0_iter10_reg <= icmp_ln115_reg_347_pp0_iter9_reg;
        icmp_ln115_reg_347_pp0_iter11_reg <= icmp_ln115_reg_347_pp0_iter10_reg;
        icmp_ln115_reg_347_pp0_iter12_reg <= icmp_ln115_reg_347_pp0_iter11_reg;
        icmp_ln115_reg_347_pp0_iter13_reg <= icmp_ln115_reg_347_pp0_iter12_reg;
        icmp_ln115_reg_347_pp0_iter14_reg <= icmp_ln115_reg_347_pp0_iter13_reg;
        icmp_ln115_reg_347_pp0_iter15_reg <= icmp_ln115_reg_347_pp0_iter14_reg;
        icmp_ln115_reg_347_pp0_iter16_reg <= icmp_ln115_reg_347_pp0_iter15_reg;
        icmp_ln115_reg_347_pp0_iter17_reg <= icmp_ln115_reg_347_pp0_iter16_reg;
        icmp_ln115_reg_347_pp0_iter2_reg <= icmp_ln115_reg_347_pp0_iter1_reg;
        icmp_ln115_reg_347_pp0_iter3_reg <= icmp_ln115_reg_347_pp0_iter2_reg;
        icmp_ln115_reg_347_pp0_iter4_reg <= icmp_ln115_reg_347_pp0_iter3_reg;
        icmp_ln115_reg_347_pp0_iter5_reg <= icmp_ln115_reg_347_pp0_iter4_reg;
        icmp_ln115_reg_347_pp0_iter6_reg <= icmp_ln115_reg_347_pp0_iter5_reg;
        icmp_ln115_reg_347_pp0_iter7_reg <= icmp_ln115_reg_347_pp0_iter6_reg;
        icmp_ln115_reg_347_pp0_iter8_reg <= icmp_ln115_reg_347_pp0_iter7_reg;
        icmp_ln115_reg_347_pp0_iter9_reg <= icmp_ln115_reg_347_pp0_iter8_reg;
        out_val_last_V_reg_342_pp0_iter10_reg <= out_val_last_V_reg_342_pp0_iter9_reg;
        out_val_last_V_reg_342_pp0_iter11_reg <= out_val_last_V_reg_342_pp0_iter10_reg;
        out_val_last_V_reg_342_pp0_iter12_reg <= out_val_last_V_reg_342_pp0_iter11_reg;
        out_val_last_V_reg_342_pp0_iter13_reg <= out_val_last_V_reg_342_pp0_iter12_reg;
        out_val_last_V_reg_342_pp0_iter14_reg <= out_val_last_V_reg_342_pp0_iter13_reg;
        out_val_last_V_reg_342_pp0_iter15_reg <= out_val_last_V_reg_342_pp0_iter14_reg;
        out_val_last_V_reg_342_pp0_iter16_reg <= out_val_last_V_reg_342_pp0_iter15_reg;
        out_val_last_V_reg_342_pp0_iter17_reg <= out_val_last_V_reg_342_pp0_iter16_reg;
        out_val_last_V_reg_342_pp0_iter2_reg <= out_val_last_V_reg_342_pp0_iter1_reg;
        out_val_last_V_reg_342_pp0_iter3_reg <= out_val_last_V_reg_342_pp0_iter2_reg;
        out_val_last_V_reg_342_pp0_iter4_reg <= out_val_last_V_reg_342_pp0_iter3_reg;
        out_val_last_V_reg_342_pp0_iter5_reg <= out_val_last_V_reg_342_pp0_iter4_reg;
        out_val_last_V_reg_342_pp0_iter6_reg <= out_val_last_V_reg_342_pp0_iter5_reg;
        out_val_last_V_reg_342_pp0_iter7_reg <= out_val_last_V_reg_342_pp0_iter6_reg;
        out_val_last_V_reg_342_pp0_iter8_reg <= out_val_last_V_reg_342_pp0_iter7_reg;
        out_val_last_V_reg_342_pp0_iter9_reg <= out_val_last_V_reg_342_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        count_1_cast_reg_328[30 : 0] <= count_1_cast_fu_166_p1[30 : 0];
        icmp_ln1064_reg_353_pp0_iter1_reg <= icmp_ln1064_reg_353;
        icmp_ln106_reg_338 <= icmp_ln106_fu_182_p2;
        icmp_ln106_reg_338_pp0_iter1_reg <= icmp_ln106_reg_338;
        icmp_ln115_reg_347_pp0_iter1_reg <= icmp_ln115_reg_347;
        out_val_last_V_reg_342_pp0_iter1_reg <= out_val_last_V_reg_342;
        sext_ln106_cast_reg_333 <= sext_ln106_cast_fu_170_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln106_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1064_reg_353 <= icmp_ln1064_fu_230_p2;
        icmp_ln115_reg_347 <= icmp_ln115_fu_216_p2;
        out_val_last_V_reg_342 <= out_val_last_V_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_338_pp0_iter16_reg == 1'd0))) begin
        out_val_data_filed_V_reg_364 <= m_axi_gmem1_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln106_fu_182_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln106_reg_338 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_96;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op58_readreq_state2 == 1'b1))) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln106_reg_338_pp0_iter16_reg == 1'd0))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln106_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        m2s_len_o = add_ln126_fu_256_p2;
    end else begin
        m2s_len_o = m2s_len_i;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln106_fu_182_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m2s_len_o_ap_vld = 1'b1;
    end else begin
        m2s_len_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op58_readreq_state2 == 1'b1))) begin
        m_axi_gmem1_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_338_pp0_iter16_reg == 1'd0))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln106_reg_338_pp0_iter17_reg == 1'd0))) begin
        outbuf_blk_n = outbuf_full_n;
    end else begin
        outbuf_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_338_pp0_iter17_reg == 1'd0))) begin
        outbuf_write = 1'b1;
    end else begin
        outbuf_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_fu_188_p2 = (ap_sig_allocacmp_i_2 + 31'd1);

assign add_ln122_fu_236_p0 = Img_width_count;

assign add_ln122_fu_236_p2 = ($signed(add_ln122_fu_236_p0) + $signed(32'd1));

assign add_ln126_fu_256_p2 = ($signed(m2s_len_i) + $signed(32'd4294967295));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (icmp_ln106_reg_338_pp0_iter17_reg == 1'd0) & (outbuf_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln106_reg_338_pp0_iter16_reg == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (icmp_ln106_reg_338_pp0_iter17_reg == 1'd0) & (outbuf_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln106_reg_338_pp0_iter16_reg == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter18 == 1'b1) & (icmp_ln106_reg_338_pp0_iter17_reg == 1'd0) & (outbuf_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln106_reg_338_pp0_iter16_reg == 1'd0) & (m_axi_gmem1_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage0_iter17 = ((icmp_ln106_reg_338_pp0_iter16_reg == 1'd0) & (m_axi_gmem1_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state19_pp0_stage0_iter18 = ((icmp_ln106_reg_338_pp0_iter17_reg == 1'd0) & (outbuf_full_n == 1'b0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((ap_predicate_op58_readreq_state2 == 1'b1) & (m_axi_gmem1_ARREADY == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_553 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln106_reg_338 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op58_readreq_state2 = ((first_itr_reg_154 == 1'd1) & (icmp_ln106_reg_338 == 1'd0));
end

assign count_1_cast_fu_166_p1 = count_1;

assign icmp_ln1064_fu_230_p2 = ((sext_ln1064_fu_226_p1 == sub_i_i) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_182_p2 = ((ap_sig_allocacmp_i_2 == trunc_ln) ? 1'b1 : 1'b0);

assign icmp_ln110_1_fu_204_p2 = ((ap_sig_allocacmp_i_2 == sub) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_198_p2 = (($signed(m2s_len_i) < $signed(32'd17)) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_216_p2 = ((m2s_len_i == in_m2s_len) ? 1'b1 : 1'b0);

assign m_axi_gmem1_ARADDR = sext_ln106_cast_reg_333;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = count_1_cast_reg_328;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign out_val_last_V_fu_210_p2 = (icmp_ln110_fu_198_p2 & icmp_ln110_1_fu_204_p2);

assign outbuf_din = {{{out_val_last_V_reg_342_pp0_iter17_reg}, {select_ln1064_1_fu_305_p3}}, {out_val_data_filed_V_reg_364}};

assign p_Result_s_fu_301_p1 = tmp_fu_293_p3;

assign select_ln1064_1_fu_305_p3 = ((icmp_ln1064_reg_353_pp0_iter17_reg[0:0] == 1'b1) ? p_Result_s_fu_301_p1 : select_ln118_1_fu_286_p3);

assign select_ln1064_fu_242_p3 = ((icmp_ln1064_fu_230_p2[0:0] == 1'b1) ? 32'd0 : add_ln122_fu_236_p2);

assign select_ln118_1_fu_286_p3 = ((icmp_ln115_reg_347_pp0_iter17_reg[0:0] == 1'b1) ? 7'd4 : 7'd0);

assign select_ln118_fu_279_p3 = ((icmp_ln115_reg_347_pp0_iter17_reg[0:0] == 1'b1) ? 3'd4 : 3'd0);

assign sext_ln1064_fu_226_p0 = Img_width_count;

assign sext_ln1064_fu_226_p1 = sext_ln1064_fu_226_p0;

assign sext_ln106_cast_fu_170_p1 = $signed(sext_ln106);

assign tmp_fu_293_p3 = {{1'd1}, {select_ln118_fu_279_p3}};

always @ (posedge ap_clk) begin
    count_1_cast_reg_328[31] <= 1'b0;
end

endmodule //userdma_paralleltostreamwithburst_Pipeline_VITIS_LOOP_106_2
