-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity userdma_paralleltostreamwithburst_Pipeline_VITIS_LOOP_106_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    outbuf_din : OUT STD_LOGIC_VECTOR (39 downto 0);
    outbuf_full_n : IN STD_LOGIC;
    outbuf_write : OUT STD_LOGIC;
    sext_ln106 : IN STD_LOGIC_VECTOR (61 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (30 downto 0);
    sub : IN STD_LOGIC_VECTOR (30 downto 0);
    in_m2s_len : IN STD_LOGIC_VECTOR (31 downto 0);
    sub_i_i : IN STD_LOGIC_VECTOR (32 downto 0);
    count_1 : IN STD_LOGIC_VECTOR (30 downto 0);
    m2s_len_i : IN STD_LOGIC_VECTOR (31 downto 0);
    m2s_len_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    m2s_len_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of userdma_paralleltostreamwithburst_Pipeline_VITIS_LOOP_106_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln106_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_itr_reg_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op58_readreq_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal icmp_ln106_reg_338_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal icmp_ln106_reg_338_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln106_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Img_width_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal gmem1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem1_blk_n_AR : STD_LOGIC;
    signal outbuf_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal count_1_cast_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_cast_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln106_cast_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln106_cast_reg_333 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln106_reg_338_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_338_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_last_V_reg_342_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_347_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1064_reg_353_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_val_data_filed_V_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal add_ln126_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1064_fu_242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_96 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln106_fu_188_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln110_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln110_1_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1064_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1064_fu_226_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln122_fu_236_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln122_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln118_fu_279_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_293_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_s_fu_301_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln118_1_fu_286_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln1064_1_fu_305_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_553 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component userdma_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component userdma_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    first_itr_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    first_itr_reg_154 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_condition_553)) then 
                    first_itr_reg_154 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln106_fu_182_p2 = ap_const_lv1_0))) then 
                    i_fu_96 <= add_ln106_fu_188_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_96 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln106_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Img_width_count <= select_ln1064_fu_242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln1064_reg_353_pp0_iter10_reg <= icmp_ln1064_reg_353_pp0_iter9_reg;
                icmp_ln1064_reg_353_pp0_iter11_reg <= icmp_ln1064_reg_353_pp0_iter10_reg;
                icmp_ln1064_reg_353_pp0_iter12_reg <= icmp_ln1064_reg_353_pp0_iter11_reg;
                icmp_ln1064_reg_353_pp0_iter13_reg <= icmp_ln1064_reg_353_pp0_iter12_reg;
                icmp_ln1064_reg_353_pp0_iter14_reg <= icmp_ln1064_reg_353_pp0_iter13_reg;
                icmp_ln1064_reg_353_pp0_iter15_reg <= icmp_ln1064_reg_353_pp0_iter14_reg;
                icmp_ln1064_reg_353_pp0_iter16_reg <= icmp_ln1064_reg_353_pp0_iter15_reg;
                icmp_ln1064_reg_353_pp0_iter17_reg <= icmp_ln1064_reg_353_pp0_iter16_reg;
                icmp_ln1064_reg_353_pp0_iter2_reg <= icmp_ln1064_reg_353_pp0_iter1_reg;
                icmp_ln1064_reg_353_pp0_iter3_reg <= icmp_ln1064_reg_353_pp0_iter2_reg;
                icmp_ln1064_reg_353_pp0_iter4_reg <= icmp_ln1064_reg_353_pp0_iter3_reg;
                icmp_ln1064_reg_353_pp0_iter5_reg <= icmp_ln1064_reg_353_pp0_iter4_reg;
                icmp_ln1064_reg_353_pp0_iter6_reg <= icmp_ln1064_reg_353_pp0_iter5_reg;
                icmp_ln1064_reg_353_pp0_iter7_reg <= icmp_ln1064_reg_353_pp0_iter6_reg;
                icmp_ln1064_reg_353_pp0_iter8_reg <= icmp_ln1064_reg_353_pp0_iter7_reg;
                icmp_ln1064_reg_353_pp0_iter9_reg <= icmp_ln1064_reg_353_pp0_iter8_reg;
                icmp_ln106_reg_338_pp0_iter10_reg <= icmp_ln106_reg_338_pp0_iter9_reg;
                icmp_ln106_reg_338_pp0_iter11_reg <= icmp_ln106_reg_338_pp0_iter10_reg;
                icmp_ln106_reg_338_pp0_iter12_reg <= icmp_ln106_reg_338_pp0_iter11_reg;
                icmp_ln106_reg_338_pp0_iter13_reg <= icmp_ln106_reg_338_pp0_iter12_reg;
                icmp_ln106_reg_338_pp0_iter14_reg <= icmp_ln106_reg_338_pp0_iter13_reg;
                icmp_ln106_reg_338_pp0_iter15_reg <= icmp_ln106_reg_338_pp0_iter14_reg;
                icmp_ln106_reg_338_pp0_iter16_reg <= icmp_ln106_reg_338_pp0_iter15_reg;
                icmp_ln106_reg_338_pp0_iter17_reg <= icmp_ln106_reg_338_pp0_iter16_reg;
                icmp_ln106_reg_338_pp0_iter2_reg <= icmp_ln106_reg_338_pp0_iter1_reg;
                icmp_ln106_reg_338_pp0_iter3_reg <= icmp_ln106_reg_338_pp0_iter2_reg;
                icmp_ln106_reg_338_pp0_iter4_reg <= icmp_ln106_reg_338_pp0_iter3_reg;
                icmp_ln106_reg_338_pp0_iter5_reg <= icmp_ln106_reg_338_pp0_iter4_reg;
                icmp_ln106_reg_338_pp0_iter6_reg <= icmp_ln106_reg_338_pp0_iter5_reg;
                icmp_ln106_reg_338_pp0_iter7_reg <= icmp_ln106_reg_338_pp0_iter6_reg;
                icmp_ln106_reg_338_pp0_iter8_reg <= icmp_ln106_reg_338_pp0_iter7_reg;
                icmp_ln106_reg_338_pp0_iter9_reg <= icmp_ln106_reg_338_pp0_iter8_reg;
                icmp_ln115_reg_347_pp0_iter10_reg <= icmp_ln115_reg_347_pp0_iter9_reg;
                icmp_ln115_reg_347_pp0_iter11_reg <= icmp_ln115_reg_347_pp0_iter10_reg;
                icmp_ln115_reg_347_pp0_iter12_reg <= icmp_ln115_reg_347_pp0_iter11_reg;
                icmp_ln115_reg_347_pp0_iter13_reg <= icmp_ln115_reg_347_pp0_iter12_reg;
                icmp_ln115_reg_347_pp0_iter14_reg <= icmp_ln115_reg_347_pp0_iter13_reg;
                icmp_ln115_reg_347_pp0_iter15_reg <= icmp_ln115_reg_347_pp0_iter14_reg;
                icmp_ln115_reg_347_pp0_iter16_reg <= icmp_ln115_reg_347_pp0_iter15_reg;
                icmp_ln115_reg_347_pp0_iter17_reg <= icmp_ln115_reg_347_pp0_iter16_reg;
                icmp_ln115_reg_347_pp0_iter2_reg <= icmp_ln115_reg_347_pp0_iter1_reg;
                icmp_ln115_reg_347_pp0_iter3_reg <= icmp_ln115_reg_347_pp0_iter2_reg;
                icmp_ln115_reg_347_pp0_iter4_reg <= icmp_ln115_reg_347_pp0_iter3_reg;
                icmp_ln115_reg_347_pp0_iter5_reg <= icmp_ln115_reg_347_pp0_iter4_reg;
                icmp_ln115_reg_347_pp0_iter6_reg <= icmp_ln115_reg_347_pp0_iter5_reg;
                icmp_ln115_reg_347_pp0_iter7_reg <= icmp_ln115_reg_347_pp0_iter6_reg;
                icmp_ln115_reg_347_pp0_iter8_reg <= icmp_ln115_reg_347_pp0_iter7_reg;
                icmp_ln115_reg_347_pp0_iter9_reg <= icmp_ln115_reg_347_pp0_iter8_reg;
                out_val_last_V_reg_342_pp0_iter10_reg <= out_val_last_V_reg_342_pp0_iter9_reg;
                out_val_last_V_reg_342_pp0_iter11_reg <= out_val_last_V_reg_342_pp0_iter10_reg;
                out_val_last_V_reg_342_pp0_iter12_reg <= out_val_last_V_reg_342_pp0_iter11_reg;
                out_val_last_V_reg_342_pp0_iter13_reg <= out_val_last_V_reg_342_pp0_iter12_reg;
                out_val_last_V_reg_342_pp0_iter14_reg <= out_val_last_V_reg_342_pp0_iter13_reg;
                out_val_last_V_reg_342_pp0_iter15_reg <= out_val_last_V_reg_342_pp0_iter14_reg;
                out_val_last_V_reg_342_pp0_iter16_reg <= out_val_last_V_reg_342_pp0_iter15_reg;
                out_val_last_V_reg_342_pp0_iter17_reg <= out_val_last_V_reg_342_pp0_iter16_reg;
                out_val_last_V_reg_342_pp0_iter2_reg <= out_val_last_V_reg_342_pp0_iter1_reg;
                out_val_last_V_reg_342_pp0_iter3_reg <= out_val_last_V_reg_342_pp0_iter2_reg;
                out_val_last_V_reg_342_pp0_iter4_reg <= out_val_last_V_reg_342_pp0_iter3_reg;
                out_val_last_V_reg_342_pp0_iter5_reg <= out_val_last_V_reg_342_pp0_iter4_reg;
                out_val_last_V_reg_342_pp0_iter6_reg <= out_val_last_V_reg_342_pp0_iter5_reg;
                out_val_last_V_reg_342_pp0_iter7_reg <= out_val_last_V_reg_342_pp0_iter6_reg;
                out_val_last_V_reg_342_pp0_iter8_reg <= out_val_last_V_reg_342_pp0_iter7_reg;
                out_val_last_V_reg_342_pp0_iter9_reg <= out_val_last_V_reg_342_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    count_1_cast_reg_328(30 downto 0) <= count_1_cast_fu_166_p1(30 downto 0);
                icmp_ln1064_reg_353_pp0_iter1_reg <= icmp_ln1064_reg_353;
                icmp_ln106_reg_338 <= icmp_ln106_fu_182_p2;
                icmp_ln106_reg_338_pp0_iter1_reg <= icmp_ln106_reg_338;
                icmp_ln115_reg_347_pp0_iter1_reg <= icmp_ln115_reg_347;
                out_val_last_V_reg_342_pp0_iter1_reg <= out_val_last_V_reg_342;
                sext_ln106_cast_reg_333 <= sext_ln106_cast_fu_170_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln106_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1064_reg_353 <= icmp_ln1064_fu_230_p2;
                icmp_ln115_reg_347 <= icmp_ln115_fu_216_p2;
                out_val_last_V_reg_342 <= out_val_last_V_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_338_pp0_iter16_reg = ap_const_lv1_0))) then
                out_val_data_filed_V_reg_364 <= m_axi_gmem1_RDATA;
            end if;
        end if;
    end process;
    count_1_cast_reg_328(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln106_fu_188_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv31_1));
    add_ln122_fu_236_p0 <= Img_width_count;
    add_ln122_fu_236_p2 <= std_logic_vector(signed(add_ln122_fu_236_p0) + signed(ap_const_lv32_1));
    add_ln126_fu_256_p2 <= std_logic_vector(unsigned(m2s_len_i) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, m_axi_gmem1_RVALID, icmp_ln106_reg_338_pp0_iter16_reg, outbuf_full_n, icmp_ln106_reg_338_pp0_iter17_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln106_reg_338_pp0_iter17_reg = ap_const_lv1_0) and (outbuf_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln106_reg_338_pp0_iter16_reg = ap_const_lv1_0) and (m_axi_gmem1_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, m_axi_gmem1_RVALID, ap_block_state2_io, icmp_ln106_reg_338_pp0_iter16_reg, outbuf_full_n, icmp_ln106_reg_338_pp0_iter17_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln106_reg_338_pp0_iter17_reg = ap_const_lv1_0) and (outbuf_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln106_reg_338_pp0_iter16_reg = ap_const_lv1_0) and (m_axi_gmem1_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, m_axi_gmem1_RVALID, ap_block_state2_io, icmp_ln106_reg_338_pp0_iter16_reg, outbuf_full_n, icmp_ln106_reg_338_pp0_iter17_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (icmp_ln106_reg_338_pp0_iter17_reg = ap_const_lv1_0) and (outbuf_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln106_reg_338_pp0_iter16_reg = ap_const_lv1_0) and (m_axi_gmem1_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state18_pp0_stage0_iter17_assign_proc : process(m_axi_gmem1_RVALID, icmp_ln106_reg_338_pp0_iter16_reg)
    begin
                ap_block_state18_pp0_stage0_iter17 <= ((icmp_ln106_reg_338_pp0_iter16_reg = ap_const_lv1_0) and (m_axi_gmem1_RVALID = ap_const_logic_0));
    end process;


    ap_block_state19_pp0_stage0_iter18_assign_proc : process(outbuf_full_n, icmp_ln106_reg_338_pp0_iter17_reg)
    begin
                ap_block_state19_pp0_stage0_iter18 <= ((icmp_ln106_reg_338_pp0_iter17_reg = ap_const_lv1_0) and (outbuf_full_n = ap_const_logic_0));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_gmem1_ARREADY, ap_predicate_op58_readreq_state2)
    begin
                ap_block_state2_io <= ((ap_predicate_op58_readreq_state2 = ap_const_boolean_1) and (m_axi_gmem1_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_553_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln106_reg_338, ap_block_pp0_stage0_11001)
    begin
                ap_condition_553 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_338 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln106_fu_182_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln106_fu_182_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln106_reg_338, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln106_reg_338 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op58_readreq_state2_assign_proc : process(icmp_ln106_reg_338, first_itr_reg_154)
    begin
                ap_predicate_op58_readreq_state2 <= ((first_itr_reg_154 = ap_const_lv1_1) and (icmp_ln106_reg_338 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_96)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_96;
        end if; 
    end process;

    count_1_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_1),32));

    gmem1_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem1_ARREADY, ap_predicate_op58_readreq_state2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op58_readreq_state2 = ap_const_boolean_1))) then 
            gmem1_blk_n_AR <= m_axi_gmem1_ARREADY;
        else 
            gmem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter17, m_axi_gmem1_RVALID, icmp_ln106_reg_338_pp0_iter16_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln106_reg_338_pp0_iter16_reg = ap_const_lv1_0))) then 
            gmem1_blk_n_R <= m_axi_gmem1_RVALID;
        else 
            gmem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln1064_fu_230_p2 <= "1" when (sext_ln1064_fu_226_p1 = sub_i_i) else "0";
    icmp_ln106_fu_182_p2 <= "1" when (ap_sig_allocacmp_i_2 = trunc_ln) else "0";
    icmp_ln110_1_fu_204_p2 <= "1" when (ap_sig_allocacmp_i_2 = sub) else "0";
    icmp_ln110_fu_198_p2 <= "1" when (signed(m2s_len_i) < signed(ap_const_lv32_11)) else "0";
    icmp_ln115_fu_216_p2 <= "1" when (m2s_len_i = in_m2s_len) else "0";

    m2s_len_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln106_fu_182_p2, m2s_len_i, ap_block_pp0_stage0, add_ln126_fu_256_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln106_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            m2s_len_o <= add_ln126_fu_256_p2;
        else 
            m2s_len_o <= m2s_len_i;
        end if; 
    end process;


    m2s_len_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln106_fu_182_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln106_fu_182_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m2s_len_o_ap_vld <= ap_const_logic_1;
        else 
            m2s_len_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_ARADDR <= sext_ln106_cast_reg_333;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= count_1_cast_reg_328;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;

    m_axi_gmem1_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op58_readreq_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op58_readreq_state2 = ap_const_boolean_1))) then 
            m_axi_gmem1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;

    m_axi_gmem1_RREADY_assign_proc : process(ap_enable_reg_pp0_iter17, icmp_ln106_reg_338_pp0_iter16_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_338_pp0_iter16_reg = ap_const_lv1_0))) then 
            m_axi_gmem1_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    out_val_last_V_fu_210_p2 <= (icmp_ln110_fu_198_p2 and icmp_ln110_1_fu_204_p2);

    outbuf_blk_n_assign_proc : process(ap_enable_reg_pp0_iter18, outbuf_full_n, icmp_ln106_reg_338_pp0_iter17_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln106_reg_338_pp0_iter17_reg = ap_const_lv1_0))) then 
            outbuf_blk_n <= outbuf_full_n;
        else 
            outbuf_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outbuf_din <= ((out_val_last_V_reg_342_pp0_iter17_reg & select_ln1064_1_fu_305_p3) & out_val_data_filed_V_reg_364);

    outbuf_write_assign_proc : process(ap_enable_reg_pp0_iter18, icmp_ln106_reg_338_pp0_iter17_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln106_reg_338_pp0_iter17_reg = ap_const_lv1_0))) then 
            outbuf_write <= ap_const_logic_1;
        else 
            outbuf_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_293_p3),7));
    select_ln1064_1_fu_305_p3 <= 
        p_Result_s_fu_301_p1 when (icmp_ln1064_reg_353_pp0_iter17_reg(0) = '1') else 
        select_ln118_1_fu_286_p3;
    select_ln1064_fu_242_p3 <= 
        ap_const_lv32_0 when (icmp_ln1064_fu_230_p2(0) = '1') else 
        add_ln122_fu_236_p2;
    select_ln118_1_fu_286_p3 <= 
        ap_const_lv7_4 when (icmp_ln115_reg_347_pp0_iter17_reg(0) = '1') else 
        ap_const_lv7_0;
    select_ln118_fu_279_p3 <= 
        ap_const_lv3_4 when (icmp_ln115_reg_347_pp0_iter17_reg(0) = '1') else 
        ap_const_lv3_0;
    sext_ln1064_fu_226_p0 <= Img_width_count;
        sext_ln1064_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1064_fu_226_p0),33));

        sext_ln106_cast_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln106),64));

    tmp_fu_293_p3 <= (ap_const_lv1_1 & select_ln118_fu_279_p3);
end behav;
